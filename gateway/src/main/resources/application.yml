spring:
  cloud:
    gateway:
      routes:
        - id: stream-song-route
          uri: ${STREAMING_SERVICE_URL:http://default-streaming-service-url}
          predicates:
            - Path=/api/v1/stream/**
          filters:
            - RewritePath=/api/v1/stream/(?<songId>.*), /v1/stream/${songId}
            - SetResponseHeader=Content-Type, audio/mpeg
          preserveHostHeader: true


        - id: songs-route
          uri: ${MEDIA_SERVICE_URL:http://default-media-service-url}
          predicates:
            - Path=/api/v1/songs
          filters:
            - RewritePath=/api/v1/songs, /songs

        - id: artists-route
          uri: ${MEDIA_SERVICE_URL:http://default-media-service-url}
          predicates:
            - Path=/api/v1/artists
            - Method=POST
          filters:
            - RewritePath=/api/v1/artists, /artists
            - AddRequestHeader=Authorization, "#{gatewayContext.getRequest().getHeaders().getFirst('Authorization')}"

        - id: search-songs-route
          uri: ${SEARCH_SERVICE_URL:http://default-search-service-url}
          predicates:
            - Path=/api/v1/search/songs/**
          filters:
            - RewritePath=/api/v1/search/songs/(?<query>.*), /search/songs/${query}

        - id: user-login-route
          uri: ${USER_SERVICE_URL:http://default-user-service-url}
          predicates:
            - Path=/api/v1/auth/login
          filters:
            - RewritePath=/api/v1/auth/login, /api/v1/auth/login

        - id: user-register-route
          uri: ${USER_SERVICE_URL:http://default-user-service-url}
          predicates:
            - Path=/api/v1/auth/register
          filters:
            - RewritePath=/api/v1/auth/register, /api/v1/auth/register


server:
  port: ${PORT:9000} # Read the port value from the PORT environment variable, default to 9000 if not set

logging:
  level:
    org.springframework.cloud.gateway: TRACE

security:
  jwt:
    public-key: "MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEApWwDqgRTVbB9o4RiL4CTQnMszmhV1DXaKUFGPyxtgPqlsvRvpaaP4BJH6FTjQcMpo5rRLdSaF+9DDqMNfWzQvd7wcMtqIrJbep281nHXMCegdJ4dbRpF3+lHq4LRWyWl2A8F0OJZRFyCAvJrqhCSA45tLbIDiyT0Xb/UeEUbye+7pcGMnX/pIabQzLv4XNfI9tlCxPlb/xKIYVz+EAN6/d6SdmaqODB8ZdB1XObpnORy3KzY49wqMeeebykJpbXNEIrm6ROu8KSgIAvuf8mzQ80QjlcCOcri+K2gSl0I+5WBDRu59KnUZ1horyCpneXitoQG2ak8nK3ECYKGAcEgYjy+JIo6mOe6TloN9Ev872xk00APRW2UWV0pfMrVXVIqnKefiBrSvWC95yRQkYELjZ5ELLxQyyxe3fvNtqIcp+H94K7PGbKmK3rT5h436pOpQUPKfRmdBQqJX1wMZJ9q+5H6jx/VTulskBxZqZqOfED4jdWaXhKQE3ZuPuVHhnlZAgMBAAE="
